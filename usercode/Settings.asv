function varargout = Settings(varargin)
% SETTINGS M-file for Settings.fig
%      SETTINGS, by itself, creates a new SETTINGS or raises the existing
%      singleton*.
%
%      H = SETTINGS returns the handle to a new SETTINGS or the handle to
%      the existing singleton*.
%
%      SETTINGS('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in SETTINGS.M with the given input arguments.
%
%      SETTINGS('Property','Value',...) creates a new SETTINGS or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before Settings_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to Settings_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help Settings

% Last Modified by GUIDE v2.5 24-May-2012 02:03:20

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @Settings_OpeningFcn, ...
                   'gui_OutputFcn',  @Settings_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before Settings is made visible.
function Settings_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to Settings (see VARARGIN)

% Choose default command line output for Settings
handles.output = hObject;


handles.Idspecies = varargin{1};
% Update handles structure
guidata(hObject, handles);

% UIWAIT makes Settings wait for user response (see UIRESUME)
% uiwait(handles.figure1);
set(handles.figure1,'position',[60 25 137.4 18.5])

%%CONSTANTS

i=1;
while i <MSXgetcount('constant')+1
    
    Idconstant= MSXgetID(i,'constant');
    table{i,1} = char(Idconstant);   
    value(i) = MSXgetconstant(i);
    table{i,2} = value(i);
    i=i+1;
    
end

set(handles.uitable1,'ColumnName',{'Constants','Value'});
set(handles.uitable1,'ColumnWidth',{95,96});
set(handles.uitable1,'ColumnEditable',[false true]); % false = ok
                                                           % true = edit column table
set(handles.uitable1,'data',table);




%%PATTERNS


a = ENgetcount('pattern');

if a~=0
    i=1;

    while (i < (a+1))
    %id
        id = char(ENgetpatternid(i));
        handles.id(i) = [ ;{id}];
        i=i+1;
    end

    set(handles.listboxpattern,'String', handles.id);
end

Patterns = handles.id(i);
save('./networks/Patterns.mat', 'Patterns');


i = 1;
while i < length(Patterns)+1
    t = strcmp()
%POP UP MENU


%  a = ENgetcount('nodes');
% 
% i=1;
% while (i < (a+1))
% 
%     %type
%     type = ENgetnodetype(i);
%     type = char(type);
%     NODES(i,1) ={type};
% 
%     %id
%     id = ENgetnodeid(i);
%     id = sprintf(' %s',char(id));
%     NODES(i,1) = strcat(NODES(i,1),id);
% 
%     i=i+1;
% end



% set(handles.text,'String',NODES);



%%Set PATTERNS

r=1;
while r < ENgetcount('nodes') +1

    type_index = ENgetnodetype(r);
    reservoir_index = strcmp(type_index,'Reservoir');
    if reservoir_index==1
        reservoir_index=r;
    end
    r=r+1;
end

% set(handles.text,'string','Reservoir');


% index = get(handles.text,'value');

% Demandpattern AS3
demandpattern = ENgetnodevalue(1,'demandpattern');
demandpattern = ENgetpatternid(demandpattern);
demandpattern = str2mat(demandpattern);
if demandpattern ==0
    demandpattern = char('None pattern');
end

EDIT = num2str(demandpattern);

set(handles.patternas3,'string', EDIT);
    
    
% Demandpattern NH2CL
    
demandpattern = ENgetnodevalue(reservoir_index,'demandpattern');
demandpattern = ENgetpatternid(demandpattern);
demandpattern = str2mat(demandpattern);
if demandpattern ==0
    demandpattern = char('None pattern');
end

EDIT = num2str(demandpattern);

set(handles.patternNh2cl,'string', EDIT);

% --- Outputs from this function are returned to the command line.
function varargout = Settings_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on selection change in listboxpattern.
function listboxpattern_Callback(hObject, eventdata, handles)
% hObject    handle to listboxpattern (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns listboxpattern contents as cell array
%        contents{get(hObject,'Value')} returns selected item from listboxpattern

a = get(handles.listboxpattern,'Value'); 
list = (get(handles.listboxpattern,'String'));

% a is index pattern
if ENgetcount('pattern')==0 && length(list)==0%an iparxei ii oxi pattern na sinexisi analoga.
    handles.zero = 0;
    % Update handles structure
    guidata(hObject, handles);
    savemat(hObject, eventdata, handles,a) % function where save index and call    ENP_PatternEditor;
elseif length(list)~=0
    handles.zero = 0;
    guidata(hObject, handles);
    savemat(hObject, eventdata, handles,a) % function where save index and call     ENP_PatternEditor;
else
    handles.zero = 1;
    guidata(hObject, handles);
    savemat(hObject, eventdata, handles,a) % function where save index and call     ENP_PatternEditor;
end


% --- Executes during object creation, after setting all properties.
function listboxpattern_CreateFcn(hObject, eventdata, handles)
% hObject    handle to listboxpattern (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit1_Callback(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit1 as text
%        str2double(get(hObject,'String')) returns contents of edit1 as a double


% --- Executes during object creation, after setting all properties.
function edit1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in add.
function add_Callback(hObject, eventdata, handles)
% hObject    handle to add (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

list = (get(handles.listboxpattern,'String'));
new_id= get(handles.edit1,'String');

if length(list)==0
    v=0;
end

c=1;
while c<length(list)+1
   v = strcmp(list(c),new_id);
   c = c+1;
end

if v~=1

    if ENgetcount('pattern')~=0 
         % get list listbox. 
         a = ENgetcount('pattern');
         i=1;
         while (i < (a+1))
         %id
            id = char(ENgetpatternid(i)); %i is index
            handles.id(i) = [ ;{id}];
            i=i+1;
         end

         set(handles.listboxpattern,'String', handles.id);

    end

        previousList = cellstr(get(handles.listboxpattern,'String'));

        % add new string to listbox
        new_id= get(handles.edit1,'String');
        new = char(new_id);
        new = cellstr(new);
        id = ENaddpattern(char(new));

        if char(id)~=0
            listpattern = [previousList;{new_id}];

            set(handles.listboxpattern,'String',listpattern);
        else
            uiwait(msgbox('Invalid property values were specified.','Error','modal'));
        end
    else
        uiwait(msgbox('Invalid pattern','Error','modal'));
end


if str2num(new_id)~=0
    set(handles.edit1,'String',str2num(new_id)+1);
end


function savemat(hObject, eventdata, handles,index)

list = (get(handles.listboxpattern,'String'));

if handles.zero==1 
    Getpatternindex = index-1;
    
elseif length(list)==0
    Getpatternindex = index-1;
else
    Getpatternindex = index;
end

if Getpatternindex~=0
    ENP_PatternEditor(Getpatternindex);
end


% --- Executes when entered data in editable cell(s) in tablepattern.
function tablepattern_CellEditCallback(hObject, eventdata, handles)
% hObject    handle to tablepattern (see GCBO)
% eventdata  structure with the following fields (see UITABLE)
%	Indices: row and column indices of the cell(s) edited
%	PreviousData: previous data for the cell(s) edited
%	EditData: string(s) entered by the user
%	NewData: EditData or its converted form set on the Data property. Empty if Data was not changed
%	Error: error string when failed to convert EditData to appropriate value for Data
% handles    structure with handles and user data (see GUIDATA)



  


% --- Executes on selection change in listboxconcen.
function listboxconcen_Callback(hObject, eventdata, handles)
% hObject    handle to listboxconcen (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns listboxconcen contents as cell array
%        contents{get(hObject,'Value')} returns selected item from listboxconcen


% --- Executes during object creation, after setting all properties.
function listboxconcen_CreateFcn(hObject, eventdata, handles)
% hObject    handle to listboxconcen (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit4_Callback(hObject, eventdata, handles)
% hObject    handle to edit4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit4 as text
%        str2double(get(hObject,'String')) returns contents of edit4 as a double


% --- Executes during object creation, after setting all properties.
function edit4_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit5_Callback(hObject, eventdata, handles)
% hObject    handle to edit5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit5 as text
%        str2double(get(hObject,'String')) returns contents of edit5 as a double


% --- Executes during object creation, after setting all properties.
function edit5_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit6_Callback(hObject, eventdata, handles)
% hObject    handle to edit6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit6 as text
%        str2double(get(hObject,'String')) returns contents of edit6 as a double


% --- Executes during object creation, after setting all properties.
function edit6_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit7_Callback(hObject, eventdata, handles)
% hObject    handle to edit7 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit7 as text
%        str2double(get(hObject,'String')) returns contents of edit7 as a double


% --- Executes during object creation, after setting all properties.
function edit7_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit7 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit8_Callback(hObject, eventdata, handles)
% hObject    handle to edit8 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit8 as text
%        str2double(get(hObject,'String')) returns contents of edit8 as a double


% --- Executes during object creation, after setting all properties.
function edit8_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit8 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton7.
function pushbutton7_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton7 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton8.
function pushbutton8_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton8 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton9.
function pushbutton9_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton9 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)



function patternas3_Callback(hObject, eventdata, handles)
% hObject    handle to patternas3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of patternas3 as text
%        str2double(get(hObject,'String')) returns contents of patternas3 as a double



% --- Executes during object creation, after setting all properties.
function patternas3_CreateFcn(hObject, eventdata, handles)
% hObject    handle to patternas3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function patternNh2cl_Callback(hObject, eventdata, handles)
% hObject    handle to patternNh2cl (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of patternNh2cl as text
%        str2double(get(hObject,'String')) returns contents of patternNh2cl as a double


% --- Executes during object creation, after setting all properties.
function patternNh2cl_CreateFcn(hObject, eventdata, handles)
% hObject    handle to patternNh2cl (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton11.
function pushbutton11_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton11 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

error1=0;
error=0;

    
r=1;
while r < ENgetcount('nodes') +1

    type_index = ENgetnodetype(r);
    reservoir_index = strcmp(type_index,'Reservoir');
    if reservoir_index==1
        reservoir_index=r;
    end
    r=r+1;
end




% Species NH2CL

new_nh = get(handles.patternNh2cl,'string');

new_index_nh = ENgetpatternindex({new_nh});

if new_index_nh==0

    uiwait(msgbox('Invalid pattern for NH2CL. See Add Patterns.','Error','modal'));

    set(handles.patternNh2cl,'string',new_nh);
        
    error1 = 1;

else

    ENsetnodevalue(reservoir_index,'DEMANDPATTERN',(new_index_nh));
    set(handles.patternNh2cl,'string',new_nh);
    
end



% Species AS3  
new = get(handles.patternas3,'string');

new_index = ENgetpatternindex({new});

if new_index==0

    uiwait(msgbox('Invalid pattern for AS3. See Add Patterns.','Error','modal'));

    set(handles.patternas3,'string',new);
       
    error = 1;

else

    ENsetnodevalue(1,'DEMANDPATTERN',(new_index));
    set(handles.patternas3,'string',new);

end

if error==0 && error1==0
%     uiwait(msgbox('       Changes is successful!','modal'));
    set(handles.figure1,'visible','off');
end


% --- Executes on button press in pushbutton10.
function pushbutton10_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton10 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes when entered data in editable cell(s) in uitable1.
function uitable1_CellEditCallback(hObject, eventdata, handles)
% hObject    handle to uitable1 (see GCBO)
% eventdata  structure with the following fields (see UITABLE)
%	Indices: row and column indices of the cell(s) edited
%	PreviousData: previous data for the cell(s) edited
%	EditData: string(s) entered by the user
%	NewData: EditData or its converted form set on the Data property. Empty if Data was not changed
%	Error: error string when failed to convert EditData to appropriate value for Data
% handles    structure with handles and user data (see GUIDATA)

table = get(handles.uitable1,'data');

a = eventdata.Indices(1); %row
b = eventdata.Indices(2); %column
new = eventdata.NewData;

c = eventdata.EditData; %EditData

d = str2num(c); % elexgos an einai arithmos ii grammata 
d = length(d);


if b==2 % for column 2
    
    if d==1 % d=1 then d is number
        MSXsetconstant(a,new); %a = row is index for constant
        table{a,b}=new;   
        set(handles.uitable1,'data',table);
    else
        table{a,b} = eventdata.PreviousData;
        set(handles.uitable1,'data',table);
    end 
end



% --- Executes during object creation, after setting all properties.
function text_CreateFcn(hObject, eventdata, handles)
% hObject    handle to text (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
